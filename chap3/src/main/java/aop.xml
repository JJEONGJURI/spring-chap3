<?xml version="1.0" encoding="UTF-8"?>
<!-- /chap3/src/main/java/aop.xml -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
 http://www.springframework.org/schema/beans/spring-beans.xsd
 http://www.springframework.org/schema/context
 http://www.springframework.org/schema/context/spring-context.xsd
 http://www.springframework.org/schema/aop
 http://www.springframework.org/schema/aop/spring-aop.xsd">
 	<bean id="write" class="spring.WriteImpl">
 		<constructor-arg><ref bean="articleDao" /></constructor-arg>
 	</bean>
 	<bean id="articleDao" class="spring.MariadbArticleDao" />
 	<bean id="logging" class="spring.LoggingAspect" />
	<!-- 
		aop 관련 용어
		  -	pointcut : 핵심기능을 가진 메서드 설정. 핵심메서드
			expression : 핵심메서드 설정
			execution(public * spring.*Impl.*(..)) 
					: spring 패키지의 클래스 중 이름이 ...Impl로 끝나는 클래스의 모든 public 메서드
				public : 접근제한자가 public인 메서드
				*	   : 리턴타입과 상관 없음.
				spring.*Impl : spring 패키지의 클래스 중  ..Impl로 끝나는 클래스
				*(..) : * => 모든 메서드
					  : (..) => 매개변수와 상관없이. 
		  - aspect : AOP 클래스 설정
		  		ref = "logging" : 객체 중 logging 이름을 가진 객체를 AOP 클래스로 설정
								  spring.LoggingAspect
		  - advice : AOP이 실행되는 시점 설정
		  		around : 핵심 메서드 실행 전, 후
		  		before : 핵심 메서드 실행 전
		  		after  : 핵심 메서드 실행 후
		  		afterReturning : 핵심메서드 정상 실행 후 
		  		afterThrowing : 핵심메서드 오류 실행 후 
	 -->
 	<!-- 필수 알고리즘은 아님  	 -->
 	<aop:config> <!-- aop 설정 -->
 		<aop:pointcut expression="execution(public * spring.*Impl.*(..))"
 			id="servicepointcut" />
 			<!-- pointcut : 핵심메서드 지정 : 스프링패키지의 임플로 끝나는 모든 메서드
 			이름은 서비스포인트컷 -->
 		<aop:aspect id="loggingAspect" ref="logging"> <!--spring.LoggingAspect 먼저 실행해라 -->
 			<!-- "loggingAspect" 를 aop class로 쓸거야 -->
 			<aop:around method="logging" pointcut-ref="servicepointcut" />
			<!--  포인트컷이 시작되는 시점에 logging 클래스 객체 안에 있는 logging 메서드 실행 -->
			<!-- around : befor after 둘다 가지고 있음 -->
			<!-- aop 는 중간에 툭툭 끼어넣는것...? -->
 		</aop:aspect>
 	</aop:config>

 </beans>